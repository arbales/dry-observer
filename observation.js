// Generated by CoffeeScript 1.3.3
(function() {
  var InvalidBindingError, Observers, capitalize, exports,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  InvalidBindingError = (function(_super) {

    __extends(InvalidBindingError, _super);

    function InvalidBindingError(event, handler) {
      this.name = "InvalidBindingError";
      this.message = "Unable create binding for `" + event + "` due unimplemented handler: `#" + handler + "`";
    }

    return InvalidBindingError;

  })(Error);

  capitalize = function(string) {
    if (!string) {
      return "";
    }
    return string.charAt(0).toUpperCase() + string.slice(1);
  };

  Observers = {
    _observedObjects: null,
    _observers: null,
    observe: function() {
      var event, events, handler, parsedEvents, target, targetEvents, _base, _name,
        _this = this;
      target = arguments[0], events = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      if (_.isString(events[0]) && events.length === 1) {
        events = events[0].split(" ");
      }
      if (_.isObject(events[0])) {
        events = events[0];
      } else if (_.isString(events[0])) {
        parsedEvents = {};
        _.each(events, function(e) {
          var action, handler, scope, _ref;
          _ref = e.split(':'), action = _ref[0], scope = _ref[1];
          handler = ["on", capitalize(action), capitalize(scope)].join('');
          handler = _this[handler] || (function() {
            throw new InvalidBindingError(e, handler);
          })();
          return parsedEvents[e] = handler;
        });
        events = parsedEvents;
      } else {
        throw new TypeError("Observe accepts either a String, an Array of Strings, or an Object.");
      }
      if (!target.cid) {
        target.cid = _.uniqueId('observed');
      }
      (this._observedObjects || (this._observedObjects = [])).push(target);
      targetEvents = (_base = (this._observers || (this._observers = {})))[_name = target.cid] || (_base[_name] = {});
      for (event in events) {
        if (!__hasProp.call(events, event)) continue;
        handler = events[event];
        target.on(event, handler);
        (targetEvents[event] || (targetEvents[event] = [])).push(handler);
      }
      return true;
    },
    stopObserving: function(target) {
      var event, events, handler, handlers, index, _i, _j, _len, _len1, _ref;
      if (!target) {
        _ref = this._observedObjects;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          target = _ref[_i];
          this.stopObserving(target);
        }
      }
      events = this._observers[target.cid];
      for (event in events) {
        if (!__hasProp.call(events, event)) continue;
        handlers = events[event];
        for (index = _j = 0, _len1 = handlers.length; _j < _len1; index = ++_j) {
          handler = handlers[index];
          target.off(event, handler);
          events[event][index] = null;
          delete events[event][index];
          false;
        }
      }
      this._observedObjects.pop(target);
      delete this._observers[target.cid];
      return true;
    },
    removeObserver: function(target, event, handlerToRemove) {
      var events, handler, handlers, index, _i, _j, _len, _len1, _ref;
      if (handlerToRemove == null) {
        handlerToRemove = false;
      }
      if (!target) {
        _ref = this._observedObjects;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          target = _ref[_i];
          this.removeObserver(target);
        }
      }
      events = _observers[target.cid];
      for (event in events) {
        if (!__hasProp.call(events, event)) continue;
        handlers = events[event];
        for (index = _j = 0, _len1 = handlers.length; _j < _len1; index = ++_j) {
          handler = handlers[index];
          if (handlerToRemove && handler !== handlerToRemove) {
            continue;
          }
          target.off(event, handler);
          events[event][index] = null;
          delete events[event][index];
          false;
        }
      }
      return true;
    }
  };

  exports = (typeof module !== "undefined" && module !== null ? module.exports : void 0) || this;

  exports.Observers = Observers;

}).call(this);
