// Generated by CoffeeScript 1.3.3
(function() {
  var App, StatusView, Transport,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  App = {};

  App.View = (function(_super) {

    __extends(View, _super);

    function View() {
      return View.__super__.constructor.apply(this, arguments);
    }

    View.prototype.remove = function() {
      this.stopObserving();
      return View.__super__.remove.call(this);
    };

    return View;

  })(Backbone.View);

  _.extend(App.View.prototype, Observers);

  Transport = (function(_super) {

    __extends(Transport, _super);

    function Transport() {
      return Transport.__super__.constructor.apply(this, arguments);
    }

    Transport.prototype.start = function() {
      var _this = this;
      setTimeout(function() {
        return _this.trigger('transport:up');
      }, 2000);
      setTimeout(function() {
        return _this.trigger('transport:down');
      }, 6000);
      setTimeout(function() {
        return _this.trigger('message:receive');
      }, 10000);
      return this;
    };

    return Transport;

  })(Backbone.Model);

  StatusView = (function(_super) {

    __extends(StatusView, _super);

    function StatusView() {
      this.onMessageReceive = __bind(this.onMessageReceive, this);

      this.onTransportDown = __bind(this.onTransportDown, this);

      this.onTransportUp = __bind(this.onTransportUp, this);
      return StatusView.__super__.constructor.apply(this, arguments);
    }

    StatusView.prototype.initialize = function() {
      StatusView.__super__.initialize.apply(this, arguments);
      return this.observe(this.model, 'transport:up transport:down message:receive');
    };

    StatusView.prototype.onTransportUp = function() {
      return $(this.el).text('Transport Online');
    };

    StatusView.prototype.onTransportDown = function() {
      $(this.el).text('Transport Offline');
      alert('Transport is Offline, view will be removed.');
      return this.remove();
    };

    StatusView.prototype.onMessageReceive = function() {
      return alert('This should never run.');
    };

    return StatusView;

  })(App.View);

  this.Transport = Transport;

  this.StatusView = StatusView;

}).call(this);
